import moment from "moment";
import React, { useState } from "react";
import { Modal } from "react-bootstrap";
import { NavLink } from "react-router-dom";
import {
  applicationAge,
  driverNavigateFn,
  navigationFn,
  removeUnderScore,
  riderNavigateFn,
  statusColor,
} from "../../helper";
// import "../rider-complaints-components.css";
import RiderAssignComplaintModal from "./admin-assign-complaint-modal";
import ComplaintsPasswordModal from "./passwordModal";
import LoadingSpinnerTable from "../../utilits/loadingSpinnerTable";
import usePermissions from "../../usePermissionChecker";

const PendingComplaintsViewModal = ({
  pendComplaintsView,
  handlePendComplaintsViewClose,
  type,
  setReload,
  reload,
  complaintData,
}) => {
  const { canRead, canWrite } = usePermissions();
  const pagePermissions = {
    driverPendingComplaints: "driver_pending_complaints",
    driverInprogressComplaints: "driver_inprogress_complaint",
    riderPendingComplaints: "rider_pending_complaints",
    riderInprogressComplaints: "rider_inprogress_complaint",
  };
  const permission = pagePermissions[type];

  console.log(type, complaintData, "kasjlknasd");

  const [loading, setLoading] = useState(false);
  const [complaintPassShow, setComplaintPassShow] = useState(false);
  const handleComplaintPassClose = () => setComplaintPassShow(false);
  const handleComplaintPassShow = () => setComplaintPassShow(true);

  const [assignComplaints, setAssignComplaints] = useState(false);
  const handleAssignComplaintsClose = () => setAssignComplaints(false);
  const handleAssignComplaintsShow = () => setAssignComplaints(true);

  const bookingDetails = [
    {
      label: "Booking ID",
      value: complaintData?.booking?.booking_id_2 ?? "--",
      navLink: true,
      link:
        // type === "driverPendingComplaints" || type === "driverInprogressComplaints"
        //   ?
        `${navigationFn(
          complaintData?.booking?.booking_classification,
          complaintData?.booking?.id
        )}`,
      // : "",
    },
    {
      label: "Booking Classification",
      value: complaintData?.booking?.booking_classification
        ? removeUnderScore(complaintData?.booking?.booking_classification)
        : "--",
    },
    {
      label: complaintData?.booking?.rider ? "Rider ID" : "Driver ID",
      value:
        complaintData?.booking?.rider?.rider_id2 ??
        complaintData?.booking?.driver?.driver_id2 ??
        "--",
      navLink: true,
      link:
        type === "driverPendingComplaints" ||
        type === "driverInprogressComplaints" ||
        type === "driverResolvedClosedComplaints"
          ? `${driverNavigateFn(
              complaintData?.booking?.driver,
              complaintData?.booking?.driver?.id
            )}`
          : `${riderNavigateFn(
              complaintData?.booking?.rider,
              complaintData?.booking?.rider?.id
            )}`,
    },
    {
      label: complaintData?.booking?.rider
        ? "Rider First Name"
        : "Driver First Name",
      value:
        complaintData?.booking?.rider?.first_name ??
        complaintData?.booking?.driver?.first_name ??
        "--",
    },
  ];
  console.log(complaintData);
  console.log(complaintData?.booking?.driver?.driver_id2);

  const ComplaintsDetails = [
    {
      label: "Received At",
      value: complaintData?.complented_at
        ? moment(complaintData?.complented_at).format("DD-MM-YYYY,HH-mm")
        : "--",
      display: complaintData?.source === "Call" ? false : true,
    },
    {
      label: "Priority Type",
      value: complaintData?.priority_type ?? "--",
      display: true,
    },
    {
      label: "Complaint Type",
      value: complaintData?.complaint_type ?? "--",
      display: true,
    },
    {
      label: "Complaint Title",
      value: complaintData?.complaint_title ?? "--",
      display: true,
    },
    {
      label: "Complaint Description",
      value: complaintData?.complaint_description ?? "--",
      display: true,
    },
    {
      label: complaintData?.initiated_at
        ? "Initiated at"
        : complaintData?.assigned_at
        ? "Assigned at"
        : complaintData?.generated_at
        ? "Generated At"
        : "Initiated at/ Assigned at",
      value: complaintData?.initiated_at
        ? moment(complaintData?.initiated_at).format("DD-MM-YYYY,HH-mm")
        : complaintData?.assigned_at
        ? moment(complaintData?.assigned_at).format("DD-MM-YYYY,HH-mm")
        : complaintData?.generated_at
        ? moment(complaintData?.generated_at).format("DD-MM-YYYY,HH-mm")
        : "--",
      display: true,
    },
    {
      label: complaintData?.initiated_by
        ? "Initiated by"
        : complaintData?.assigned_by
        ? "Assigned by"
        : complaintData?.generated_by
        ? "Generated By"
        : "Initiated by/ Assigned by",
      value:
        complaintData?.InitiatedBy?.user_name ??
        complaintData?.AssignedBy?.user_name ??
        complaintData?.GeneratedBy?.user_name ??
        "--",
      display: true,
    },
    {
      label: "Current Owner",
      value: complaintData?.CurrentOwnerName?.user_name ?? "Pending",
      display: true,
    },
    {
      label: "Complaint Age",
      value: complaintData?.complented_at
        ? applicationAge(new Date(complaintData?.complented_at))
        : complaintData?.generated_at
        ? applicationAge(new Date(complaintData?.generated_at))
        : "--",
      display: true,
    },
    {
      label: "Last Active At",
      value: complaintData?.last_active_at
        ? moment(complaintData?.last_active_at).format("DD-MM-YYYY,HH-mm")
        : "--",
      display: complaintData?.source === "Call" ? false : true,
    },
  ];

  const reassignData = [
    {
      label: "Reassigned at",
      value: complaintData?.re_assigned_at
        ? moment(complaintData?.re_assigned_at).format("DD-MM-YYYY,HH:mm")
        : "--",
      display: true,
    },
    {
      label: "Reassigned by",
      value: complaintData?.ReAssignedBy?.user_name ?? "--",
      display: true,
    },
  ];

  if (complaintData?.complaint_status === "Reassigned") {
    if (complaintData?.source === "Call") {
      const startIndex = ComplaintsDetails.length - 2;
      ComplaintsDetails.splice(startIndex, 0, ...reassignData);
    } else {
      const startIndex = ComplaintsDetails.length - 3;
      ComplaintsDetails.splice(startIndex, 0, ...reassignData);
    }
  }

  const resolvedOrClosedData = [
    {
      label:
        complaintData?.complaint_status === "Resolved"
          ? "Resolved at"
          : complaintData?.complaint_status === "Closed"
          ? "Closed at"
          : "--",
      value:
        complaintData?.complaint_status === "Resolved" &&
        complaintData?.resolved_at
          ? moment(complaintData?.resolved_at).format("DD-MM-YYYY,HH:mm")
          : complaintData?.complaint_status === "Closed" &&
            complaintData?.closed_at
          ? moment(complaintData?.closed_at).format("DD-MM-YYYY,HH:mm")
          : "--",
      display: true,
    },
    {
      label:
        complaintData?.complaint_status === "Resolved"
          ? "Resolved by"
          : complaintData?.complaint_status === "Closed"
          ? "Closed by"
          : "--",
      value:
        complaintData?.complaint_status === "Resolved"
          ? complaintData?.ReslovedBy?.user_name
          : complaintData?.complaint_status === "Closed"
          ? complaintData?.ClosedBy?.user_name
          : "--",
      display: true,
    },
  ];

  if (
    complaintData?.complaint_status === "Resolved" ||
    complaintData?.complaint_status === "Closed"
  ) {
    ComplaintsDetails.push(...resolvedOrClosedData);
  }

  const [complaintType, setComplaintType] = useState("");

  console.log(type, complaintData, "sdjfbjkafs");

  return (
    <>
      <ComplaintsPasswordModal
        complaintPassShow={complaintPassShow}
        handleComplaintPassClose={handleComplaintPassClose}
        handlePendComplaintsViewClose={handlePendComplaintsViewClose}
        id={complaintData?.id}
        complaintType={complaintType}
        type={type}
        title="Are you sure you want to initiate the complaint?"
        setReload={setReload}
        reload={reload}
      />
      <RiderAssignComplaintModal
        handlePendComplaintsViewClose={handlePendComplaintsViewClose}
        assignComplaints={assignComplaints}
        handleAssignComplaintsClose={handleAssignComplaintsClose}
        type={type}
        id={complaintData?.id}
        driverID={complaintData?.booking?.driver?.id}
        riderID={complaintData?.booking?.rider?.id}
        setReload={setReload}
        reload={reload}
        complaintData={complaintData}
        complaintType={complaintType}
      />

      <Modal
        centered
        show={pendComplaintsView}
        onHide={handlePendComplaintsViewClose}
        dialogClassName="rider_complaints_view_container"
        contentClassName="border_radius_10px"
        backdropClassName="rider_complaints_modal_backdrop"
        backdrop="static"
        keyboard={false}
      >
        <Modal.Body>
          {loading && <LoadingSpinnerTable />}
          <>
            <div className="d-flex justify-content-between align-items-center  mt-1">
              <span className="d-flex align-items-center">
                <span className="fs_22 primary_color fw_600">
                  {complaintData?.complaint_id2 ?? "--"}
                </span>
                <span className="secondary_color fs_13 fw_500">
                  (Source : {complaintData?.source ?? "--"})
                </span>
              </span>

              <span
                onClick={() => handlePendComplaintsViewClose()}
                className="cursor_pointer"
              >
                <i className="ri-close-circle-fill primary_color fs_22" />
              </span>
            </div>

            <div className="ms-3 mt-2">
              <span className="primary_color fs_15 fw_500">
                Complaint status :
              </span>
              <span
                className={`${statusColor(
                  complaintData?.complaint_status
                )} text-lg-end fs_15 fw_500`}
              >
                {" "}
                {complaintData?.complaint_status ?? "--"}
              </span>
            </div>

            <div className="booking_ID_container p-sm-2 border_radius_10px mt-3 ms-sm-3 ">
              <table>
                <tbody>
                  {bookingDetails?.map((item, index) => (
                    <tr className="fs_15 fw_500" key={item?.id}>
                      <td className="text-nowrap sonic_silver_color w-25">
                        {item?.label}
                      </td>
                      <td
                        className={`${
                          item?.label === "Booking Classification"
                            ? "sonic_silver_color"
                            : "primary_color"
                        } text-nowrap ps-md-5`}
                      >
                        {item?.navLink ? (
                          <NavLink to={item?.link} className="primary_color">
                            {item?.value}
                          </NavLink>
                        ) : (
                          item?.value
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="ms-3 mt-4">
              <table className="w-100">
                <tbody>
                  {ComplaintsDetails?.map(
                    (item, index) =>
                      item?.display && (
                        <tr className="fs_15 fw_500" key={item?.id}>
                          <td className="text-nowrap sonic_silver_color w-25">
                            {item?.label}
                          </td>
                          <td className="ps-md-5 primary_color">
                            {item?.value}
                          </td>
                        </tr>
                      )
                  )}
                </tbody>
              </table>
            </div>
            {complaintData?.complaint_status === "Resolved" ||
            complaintData?.complaint_status === "Closed" ? (
              <></>
            ) : (
              <>
                {canWrite(permission) === false ? (
                  <></>
                ) : (
                  <div className="d-flex justify-content-center gap-3 mt-4">
                    {type === "riderPendingComplaints" ||
                    type === "driverPendingComplaints" ? (
                      <>
                        <button
                          className="primary_border white_bg primary_color border_radius_3px fw_500 fs_15 py-1 px-3"
                          type="button"
                          onClick={() => {
                            handleAssignComplaintsShow();
                            setComplaintType("assignComplaint");
                          }}
                        >
                          Assign The Complaint
                        </button>
                        <button
                          className="border_none border_radius_3px primary_bg white_color fw_500 fs_15 py-1 px-3"
                          type="button"
                          onClick={() => {
                            handleComplaintPassShow();
                            setComplaintType("initiateComplaint");
                          }}
                        >
                          Initiate The Complaint
                        </button>
                      </>
                    ) : (
                      <>
                        <button
                          className="border_none border_radius_3px primary_bg white_color fw_500 fs_15 py-1 px-3"
                          type="button"
                          onClick={() => {
                            handleAssignComplaintsShow();
                            setComplaintType("reAssignComplaint");
                          }}
                        >
                          Reassign The Complaint
                        </button>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </>
        </Modal.Body>
      </Modal>
    </>
  );
};

export default PendingComplaintsViewModal;
